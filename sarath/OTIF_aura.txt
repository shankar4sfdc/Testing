-------------------------Component Start-----------------------------------------
<aura:component controller="jsonformatterforLC" access="global">
    <aura:attribute name="listOfRecords" type="list"/>
    <aura:attribute name="listOfHeaders" type="string[]"/>  
    <aura:attribute name="NoRecordsFound" type="boolean"/>
    <aura:attribute name="intref" type="Integer" default="0"/>
    <aura:handler name="init" value="{!this}" action="{!c.doInit}"/>  
   
    <aura:if isTrue="{!v.NoRecordsFound}">
        <!--display error message if there is no records available -->
        <div class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_info" role="alert">
            <span class="slds-assistive-text">error</span>
            <h2>No record found.</h2>
        </div>
        <aura:set attribute="else">
            <div class="slds slds-m-around_xx-small">
                <table class="slds-table slds-table_bordered slds-table_col-bordered">    
                    <thead>
                        <tr>            
                            <aura:iteration items="{!v.listOfHeaders}" var="headr">                    
                                <th class="slds-theme_shade">
                                    <div class="slds-truncate slds-align_absolute-center"> {!headr} </div>
                                </th>  
                            </aura:iteration>                
                        </tr>    
                    </thead>
                    <tbody>
                        <aura:iteration items="{!v.listOfRecords}" var="row">
                            <tr>  
                                <aura:iteration items="{!row.materialValues}" var="rowofrow">                    
                                    <td>
                                        <div class="slds-truncate slds-align_absolute-center"> {!rowofrow} </div>
                                    </td>  
                                </aura:iteration>
                            </tr>
                        </aura:iteration>
                    </tbody>    
                </table>
            </div>
            <!--<div style="height: 300px">
                <lightning:datatable
                                     keyField="id"
                                     data="{! v.listOfRecords }"
                                     columns="{! v.listOfHeaders }"
                                     hideCheckboxColumn="true"/>
            </div>-->
        </aura:set>
    </aura:if>
</aura:component>
---------------------------------------Component End---------------------------------------------------
---------------------------------------HelperCode Start---------------------------------------------------
({
doInit : function(component, event, helper) {
        var action = component.get("c.getOTIFS");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if (state === "SUCCESS"){
                var result = response.getReturnValue();
                if(result.length > 0){
                    var keys = Object.entries(result);
                     for (var i = 0; i < result.length; i++) {
                    console.log('month data----->'+JSON.stringify(result[i]));
                       
                    }
                    component.set('v.listOfRecords', result);
                    component.set('v.listOfHeaders', result[0].headerStrings);
                }else{
                    // if there is no records then display message
                    component.set("v.NoRecordsFound" , true);
                }
            }
            else{
                alert('Error...');
            }
        });
        $A.enqueueAction(action);  
},
})
--------------------------------------HelperCode End----------------------------------------
--------------------------------------Apex Class Start----------------------------------------
public class jsonformatterforLC {
   
    @AuraEnabled
    public static List<jsonWrapperMonthwise> getOTIFS(){
       //system.debug('@@ '+briefId);

        /*Set<String> univarProductName = new Set<String>();
       
        Brief__c brief = [SELECT Id, Account__r.Id from Brief__C WHERE Id = :briefId];
       
        Account acc = [SELECT Id,AccountNumber,SalesOrg__c,Customer_Code__c from Account WHERE Id = : brief.Account__r.Id];
       
        system.debug('Account Id:'+acc.Id);
       
        for(Opportunity opp : [SELECT Univar_Product__c,Univar_Product__r.Name, AccountId, Id FROM Opportunity WHERE AccountId =: brief.Account__r.Id]){
            if(opp.Univar_Product__c != null && String.isNotBlank(opp.Univar_Product__r.Name)){
                univarProductName.add(opp.Univar_Product__r.Name);
            }
        }
       
        String json = DataWareHouseIntegration.callDWForOTIFsAPI('10062158','GB01');*/      

        String json = '[{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-04-01T00:00:00","value":4.0},' +
                        '{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-05-01T00:00:00",' +
                        '"value":5.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-06-01T00:00:00",' +
                        '"value":6.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-07-01T00:00:00",' +
                        '"value":7.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-08-01T00:00:00",' +
                        '"value":8.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-09-01T00:00:00",' +
                        '"value":9.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-10-01T00:00:00",' +
                        '"value":10.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-11-01T00:00:00",' +
                        '"value":11.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-12-01T00:00:00",' +
                        '"value":12.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-01-01T00:00:00",' +
                        '"value":1.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2021-02-01T00:00:00",' +
                        '"value":2.0},{"material":"SALT PDV IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2021-03-01T00:00:00","value":3.0},'+
            '{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2021-03-01T00:00:00","value":3.0},' +
                        '{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-04-01T00:00:00",' +
                        '"value":4.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-05-01T00:00:00",' +
                        '"value":5.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-06-01T00:00:00",' +
                        '"value":6.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-07-01T00:00:00",' +
                        '"value":7.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-08-01T00:00:00",' +
                        '"value":8.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-09-01T00:00:00",' +
                        '"value":9.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-10-01T00:00:00",' +
                        '"value":10.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-11-01T00:00:00",' +
                        '"value":11.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-12-01T00:00:00",' +
                        '"value":12.0},{"material":"SALT IND 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2020-01-01T00:00:00",' +
                        '"value":1.0},{"material":"SALT PDV 1K BLK",' +
                        '"univarProduct":"SALT PDV IND 1KG BULK - SAP",' +
                        '"cpp":"CPP","month":"2021-02-01T00:00:00","value":2.0}]';
       
        //system.debug('JSON returned is:'+Json);
        List<jsonWrapper> oTIFIntegrationWrapperList = (List<jsonWrapper>)System.JSON.deserialize(json, List<jsonWrapper>.class);
       
        //system.debug('oTIFIntegrationWrapperList returned is:'+oTIFIntegrationWrapperList);
        map<String,List<jsonWrapper>> materialwiseData = new map<String,List<jsonWrapper>>();
        for(jsonWrapper jw : oTIFIntegrationWrapperList)
        {
            //converting list to map based on material
            if(materialwiseData.containsKey(jw.material))
            {
                List<jsonWrapper> monthValues = materialwiseData.get(jw.material);
monthValues.add(jw);
materialwiseData.put(jw.material, monthValues);
            }
            else
            {
                materialwiseData.put(jw.material, new List<jsonWrapper> { jw });
            }
           
        }
        List<jsonWrapperMonthwise> materialwiseList = new List<jsonWrapperMonthwise>();
        List<String> monthNames = new List<String>{'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'};
        List<String> staticheaderValues = new List<String>();
        List<String> headerValues;// = new List<String>();
        List<String> matValues;// = new List<String>();
       
        for(string str : materialwiseData.keyset())
        {
            jsonWrapperMonthwise jwm = new jsonWrapperMonthwise();
            headerValues = new List<String>();
            matValues = new List<String>{'','','','','','','','','','','','',''};
            matValues.remove(0);
            matValues.add(0,str);
            if(!staticheaderValues.isEmpty())
                headerValues.addAll(staticheaderValues);
            if(!headerValues.contains('Material Name'))
            headerValues.add('Material Name');
            for(jsonWrapper jw : materialwiseData.get(str))
            {
            //jwm.fiscalyear = jwm.fiscalyear!=null ? (jwm.fiscalyear<jw.month.year()?jwm.fiscalyear:jw.month.year() ) : jw.month.year();
                system.debug('--month->'+jw.month.month()+'--value--'+jw.value);
                switch on jw.month.month() {
                    when 1{
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 2{
                        //jwm.month2 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 3{
                        //jwm.month3 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 4{
                        //jwm.month4 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 5{
                        //jwm.month5 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 6{
                        //jwm.month6 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 7{
                        //jwm.month7 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 8{
                        //jwm.month8 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 9{
                        //jwm.month9 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 10{
                        //jwm.month10 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 11{
                        //jwm.month11 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                    when 12{
                        //jwm.month12 = jw.value;
                        String hstr = monthNames[jw.month.month()-1]+'-'+String.valueOf(jw.month.year()).substring(2, 4);
                        if(!headerValues.contains(hstr))
                            headerValues.add(hstr);
                        matValues.remove(headerValues.indexOf(hstr));
                        if(matValues.size() <= headerValues.indexOf(hstr))
                            matValues.add(String.valueOf(jw.value));
                        else
                        matValues.add(headerValues.indexOf(hstr),String.valueOf(jw.value));
                    }
                }
                //system.debug('headerValues is:'+headerValues);
                //system.debug('headerValues is:'+headerValues.size());
            }
            jwm.headerStrings = new Set<String>();
            jwm.headerStrings.addAll(headerValues);
            staticheaderValues.addAll(headerValues);
            jwm.materialValues = new List<String>();
            jwm.materialValues.addAll(matValues);
            materialwiseList.add(jwm);
        }
        system.debug('materialValues is:'+materialwiseList);
        //system.debug('materialwiseList is:'+materialwiseList);
        return materialwiseList;
    }
   
   
    public Class jsonWrapper {
        @AuraEnabled public String material;
        @AuraEnabled public String univarProduct;
        @AuraEnabled public String cPP;
        @AuraEnabled public DateTime month;
        @AuraEnabled public Decimal value;
    }
   
    public Class jsonWrapperMonthwise {
        @AuraEnabled public Set<String> headerStrings {get;set;}
        @AuraEnabled public List<String> materialValues {get;set;}
    }

}
------------------------Apex code End-----------------------------------------------------------------
